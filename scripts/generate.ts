import Parser from "rss-parser";
import fs from "fs";
import path from "path";
import * as tar from "tar";

const TEMPORARY_DIRECTORY = "temp";
const OUTPUT_DIRECTORY = "syntaxes";

const LINGUIST_REPOSITORY_URL = "https://github.com/github-linguist/linguist/";

const fetchBinary = async (url: string) => {
    const response = await fetch(url);
    return response.arrayBuffer();
};

const fetchRegexGrammar = async () => {
    console.log("Fetching regex grammar...");

    const releases_feed_URL = new URL("releases.atom", LINGUIST_REPOSITORY_URL).href;

    const parser = new Parser();
    const feed = await parser.parseURL(releases_feed_URL);
    const latestVersion = feed.items[0].title;

    const grammarURL = new URL(`releases/download/${latestVersion}/linguist-grammars.tar.gz`, LINGUIST_REPOSITORY_URL)
        .href;
    const grammar = await fetchBinary(grammarURL);
    if (!fs.existsSync(TEMPORARY_DIRECTORY)) {
        fs.mkdirSync(TEMPORARY_DIRECTORY);
    }
    const grammarPath = path.join(TEMPORARY_DIRECTORY, "linguist-grammars.tar.gz");
    fs.writeFileSync(grammarPath, Buffer.from(grammar));

    await tar.x({
        file: grammarPath,
        cwd: TEMPORARY_DIRECTORY
    });

    const regexGrammarPath = path.join(TEMPORARY_DIRECTORY, "linguist-grammars", "source.js.regexp.json");
    const regexGrammar = await fs.readFileSync(regexGrammarPath, "utf-8");

    return {
        grammar: JSON.parse(regexGrammar),
        version: latestVersion
    };
};

const main = async () => {
    const regex = await fetchRegexGrammar();
    const regexGrammar = regex.grammar;

    console.log("Transforming grammars...");

    regexGrammar.scopeName = "text.regex";

    regexGrammar.repository.regexp.patterns.push({
        match: ".",
        name: "string.regexp"
    });

    const grammar = {
        information_for_contributors: [
            "This file is autogenerated. Do not edit it manually. Instead, edit the `generate.ts` script and run it.",
            "Sources for this file are:",
            LINGUIST_REPOSITORY_URL
        ],
        lastUpdated: new Date().toISOString(),
        regexGrammarVersion: regex.version,
        name: "regexp",
        aliases: ["regex"],
        ...regexGrammar
    };

    const outputPath = path.join(OUTPUT_DIRECTORY, "regex.tmLanguage.json");
    await fs.writeFileSync(outputPath, JSON.stringify(grammar, null, 4));

    console.log("Done!");
};

main();
